generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campus {
  id                 String               @id @default(uuid())
  company_id         String
  campus_name        String
  campus_imgurl      String?
  campus_phone       String
  campus_code        String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  is_active          Boolean              @default(true)
  is_deleted         Boolean              @default(false)
  deleted_at         DateTime?
  location           String
  Alumni             Alumni[]
  Company            Company              @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Class              Class[]
  Course             Course[]
  Department         Department[]
  Employee           Employee[]
  EmployeeAttendance EmployeeAttendance[]
  Event              Event[]
  Examination        Examination[]
  Income             Income[]
  Payroll            Payroll[]
  Student            Student[]
  StudentAttendance  StudentAttendance[]
  TeacherCampus      TeacherCampus[]

  @@index([id, company_id])
}

model Company {
  id               String             @id @default(uuid())
  name             String
  logoUrl          String?
  address          String
  city             String
  country          String
  primary_contact  String
  plan             PricingPlan
  billing_expired  DateTime
  created_at       DateTime           @default(now())
  deleted_at       DateTime?
  is_deleted       Boolean            @default(false)
  updated_at       DateTime           @default(now())
  subdomain        String?
  Alumni           Alumni[]
  Assignment       Assignment[]
  Batch            Batch[]
  Billing          Billing[]
  Campus           Campus[]
  EmailLog         EmailLog[]
  Employee         Employee[]
  Enrollment       Enrollment[]
  Event            Event[]
  Expense          Expense[]
  Fees             Fees[]
  Income           Income[]
  Literature       Literature[]
  Log              Log[]
  Notice           Notice[]
  Notification     Notification[]
  Parent           Parent[]
  Role             Role[]
  StudentPromotion StudentPromotion[]
  Subject          Subject[]
  Teacher          Teacher[]
  TeacherPromotion TeacherPromotion[]
  Test             Test[]
  Transaction      Transaction[]
  User             User[]

  @@index([id])
}

model User {
  id            String         @id @default(uuid())
  first_name    String
  last_name     String
  email         String
  password      String
  profile_image String?
  active        Boolean        @default(false)
  created_at    DateTime       @default(now())
  deleted_at    DateTime?
  is_deleted    Boolean        @default(false)
  onboarded     Boolean        @default(false)
  updated_at    DateTime       @default(now())
  company_id    String
  Billing       Billing[]
  Employee      Employee[]
  Log           Log[]
  Notification  Notification[]
  Parent        Parent[]
  Role          Role[]
  Company       Company        @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([email, id])
}

model Student {
  id                String              @id @default(uuid())
  campus_id         String
  first_name        String
  last_name         String
  gender            String
  date_of_birth     DateTime
  contact           String
  address           String
  enrollment_date   DateTime
  section           String
  roll_number       String
  profile_picture   String?
  batch_id          String
  is_deleted        Boolean             @default(false)
  created_at        DateTime            @default(now())
  deleted_at        DateTime?
  updated_at        DateTime            @default(now())
  class_id          String
  parent_id         String?
  religion          String
  Alumni            Alumni[]
  AssignmentGroup   AssignmentGroup[]
  Enrollment        Enrollment[]
  Fees              Fees[]
  Batch             Batch               @relation(fields: [batch_id], references: [id], onDelete: Cascade)
  Campus            Campus              @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Class             Class               @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Parent            Parent?             @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  StudentAnswer     StudentAnswer[]
  StudentAttendance StudentAttendance[]
  StudentPromotion  StudentPromotion[]
  TestGroup         TestGroup[]

  @@index([id, parent_id, campus_id, class_id, batch_id])
}

model Teacher {
  id                String              @id @default(uuid())
  first_name        String
  last_name         String
  gender            String
  caste             String
  religion          String
  contact           String
  address           String
  current_position  String
  profile_picture   String?
  is_deleted        Boolean             @default(false)
  created_at        DateTime            @default(now())
  deleted_at        DateTime?
  updated_at        DateTime            @default(now())
  hiring_date       DateTime            @default(now())
  class_id          String?
  employee_id       String?
  company_id        String
  Assignment        Assignment[]
  StudentAttendance StudentAttendance[]
  Class             Class?              @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Company           Company             @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Employee          Employee?           @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  TeacherCampus     TeacherCampus[]
  TeacherPromotion  TeacherPromotion[]
  TeacherSubject    TeacherSubject[]
  Test              Test[]

  @@index([id, employee_id, class_id])
}

model Batch {
  id         String    @id @default(uuid())
  batch_name String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  end_date   DateTime
  is_deleted Boolean   @default(false)
  start_date DateTime
  updated_at DateTime  @default(now())
  campus_id  String?
  centeral   Boolean   @default(true)
  company_id String
  Company    Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Student    Student[]

  @@index([id, company_id, campus_id])
}

model TeacherCampus {
  id         String    @id @default(uuid())
  campus_id  String
  teacher_id String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  updated_at DateTime  @default(now())
  end_time   DateTime?
  start_time DateTime?
  Campus     Campus    @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Teacher    Teacher   @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([id, campus_id, teacher_id])
}

model Parent {
  id              String    @id @default(uuid())
  company_id      String
  user_id         String
  first_name      String
  last_name       String
  contact         String
  email           String
  address         String
  is_guardian     Boolean   @default(false)
  profile_picture String?
  is_deleted      Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())
  deleted_at      DateTime?
  Company         Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  User            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Student         Student[]

  @@index([id, company_id, email])
}

model Subject {
  id             String           @id @default(uuid())
  subject_name   String
  created_at     DateTime         @default(now())
  deleted_at     DateTime?
  is_deleted     Boolean          @default(false)
  updated_at     DateTime         @default(now())
  company_id     String
  ClassSchedule  ClassSchedule[]
  Enrollment     Enrollment[]
  Question       Question[]
  Company        Company          @relation(fields: [company_id], references: [id], onDelete: Cascade)
  TeacherSubject TeacherSubject[]
  Test           Test[]

  @@index([id, company_id])
}

model TeacherSubject {
  id         String    @id @default(uuid())
  subject_id String
  teacher_id String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  updated_at DateTime  @default(now())
  Subject    Subject   @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  Teacher    Teacher   @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([id, subject_id, teacher_id])
}

model Payroll {
  id             String         @id @default(uuid())
  campus_id      String
  employee_id    String
  payroll_date   DateTime
  invoice_number String?
  title          String
  total          Int
  currency_code  String
  status         Statuses
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  deleted_at     DateTime?
  is_deleted     Boolean        @default(false)
  Campus         Campus         @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Employee       Employee       @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  PayrollItems   PayrollItems[]

  @@index([id, campus_id, employee_id, invoice_number, payroll_date])
}

model PayrollItems {
  id              String   @id @default(uuid())
  payroll_id      String
  title           String
  deduction       Boolean  @default(false)
  reason          String?
  tax_type        String?
  tax_amount      Int?
  amount          Int      @default(0)
  currency_symbol String   @default("$")
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  deleted_at      DateTime @default(now())
  is_deleted      Boolean  @default(false)
  payroll         Payroll  @relation(fields: [payroll_id], references: [id], onDelete: Cascade)

  @@index([id, payroll_id])
}

model Notification {
  id         String   @id @default(uuid())
  message    String
  company_id String
  seen       Boolean  @default(false)
  user_id    String
  from_id    String?
  type       String   @default("System")
  priority   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime @default(now())
  is_deleted Boolean  @default(false)
  Company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, user_id, from_id])
}

model Employee {
  id                        String               @id @default(uuid())
  campus_id                 String
  first_name                String
  last_name                 String
  email                     String
  phone                     String
  gender                    String
  religion                  String
  address                   String
  caste                     String
  blood_group               String?
  emergency_contact_name    String?
  emergency_contract_number String?
  employee_assigned_id      String?
  date_of_joining           DateTime
  education                 String
  job_title                 String
  created_at                DateTime             @default(now())
  updated_at                DateTime             @default(now())
  deleted_at                DateTime?
  is_deleted                Boolean              @default(false)
  company_id                String
  user_id                   String
  Department                Department[]
  Campus                    Campus               @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Company                   Company              @relation(fields: [company_id], references: [id], onDelete: Cascade)
  User                      User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  EmployeeAttendance        EmployeeAttendance[]
  Payroll                   Payroll[]
  Teacher                   Teacher[]

  @@index([id, company_id, campus_id, email])
}

model Assignment {
  id              String            @id @default(uuid())
  title           String
  description     String
  deadline        DateTime
  teacher_id      String
  document_url    String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  deleted_at      DateTime?
  is_deleted      Boolean           @default(false)
  can_submit_late Boolean           @default(false)
  company_id      String
  Company         Company           @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Teacher         Teacher           @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  AssignmentGroup AssignmentGroup[]

  @@index([id, company_id, teacher_id])
}

model AssignmentGroup {
  id              String     @id @default(uuid())
  assignment_id   String
  class_id        String?
  student_id      String?
  remarks         String?
  score           String?
  percentage      String?
  submission_date DateTime?
  is_late         Boolean?
  submission_url  String?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @default(now())
  deleted_at      DateTime?
  is_deleted      Boolean    @default(false)
  Assignment      Assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  Class           Class?     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Student         Student?   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([id, assignment_id, class_id, student_id])
}

model Alumni {
  id              String    @id @default(uuid())
  student_id      String
  graduation_date DateTime
  is_employed     Boolean
  is_deleted      Boolean   @default(false)
  campus_id       String
  company_id      String
  created_at      DateTime  @default(now())
  deleted_at      DateTime?
  updated_at      DateTime  @default(now())
  Campus          Campus    @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Company         Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Student         Student   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, campus_id, student_id])
}

model Class {
  id              String            @id @default(uuid())
  name            String
  location        String
  campus_id       String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now())
  deleted_at      DateTime?
  is_deleted      Boolean           @default(false)
  AssignmentGroup AssignmentGroup[]
  Campus          Campus            @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  ClassCourse     ClassCourse[]
  ClassSchedule   ClassSchedule[]
  Student         Student[]
  Teacher         Teacher[]
  TestGroup       TestGroup[]

  @@index([id, campus_id])
}

model Transaction {
  id            String    @id @default(uuid())
  company_id    String
  entity_name   String
  entity_id     String
  entity_value  String
  created_by_id String
  updated_by_id String
  title         String
  description   String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  deleted_at    DateTime?
  is_deleted    Boolean   @default(false)
  Company       Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, entity_id, created_by_id, created_at])
}

model Department {
  id                 String    @id @default(uuid())
  campus_id          String
  name               String
  location           String
  description        String?
  head_of_department String
  banner_image       String?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now())
  deleted_at         DateTime?
  is_deleted         Boolean   @default(false)
  Campus             Campus    @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Employee           Employee  @relation(fields: [head_of_department], references: [id], onDelete: Cascade)

  @@index([id, campus_id, head_of_department])
}

model Course {
  id             String        @id @default(uuid())
  course_name    String
  course_edition String?
  campus_id      String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  deleted_at     DateTime?
  is_deleted     Boolean       @default(false)
  ClassCourse    ClassCourse[]
  Campus         Campus?       @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Enrollment     Enrollment[]
  Literature     Literature[]

  @@index([id, campus_id])
}

model ClassCourse {
  id         String    @id @default(uuid())
  class_id   String
  course_id  String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  Class      Class     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Course     Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([id, class_id, course_id])
}

model Expense {
  id            String   @id @default(uuid())
  company_id    String
  reason        String
  amount        String
  created_by_id String
  updated_by_id String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  is_deleted    Boolean  @default(false)
  Company       Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, created_by_id, created_at])
}

model Notice {
  id            String      @id @default(uuid())
  description   String
  created_by_id String
  updated_by_id String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
  is_deleted    Boolean     @default(false)
  is_active     Boolean     @default(true)
  notice_type   NoticeTypes
  company_id    String
  Company       Company     @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, created_by_id])
}

model EmailLog {
  id         String   @id @default(uuid())
  sent_date  DateTime
  email_type String
  status     Statuses
  payload    Json
  to_email   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  company_id String
  Company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, status, email_type])
}

model Test {
  id              String         @id @default(uuid())
  title           String
  description     String
  deadline        DateTime
  can_submit_late Boolean        @default(false)
  duration        Int
  teacher_id      String
  subject_id      String
  is_deleted      Boolean        @default(false)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  company_id      String
  Company         Company        @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Subject         Subject        @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  Teacher         Teacher        @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  TestGroup       TestGroup[]
  TestQuestion    TestQuestion[]

  @@index([id, company_id, deadline, teacher_id, subject_id])
}

model TestQuestion {
  id                 String               @id @default(uuid())
  test_id            String
  marks              Int?
  value              String?
  type               String
  image_url          String?
  is_deleted         Boolean              @default(false)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now())
  deleted_at         DateTime?
  StudentAnswer      StudentAnswer[]
  Test               Test                 @relation(fields: [test_id], references: [id], onDelete: Cascade)
  TestQuestionOption TestQuestionOption[]

  @@index([id, test_id])
}

model TestQuestionOption {
  id               String       @id @default(uuid())
  test_question_id String
  value            String
  is_correct       Boolean      @default(false)
  is_deleted       Boolean      @default(false)
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  deleted_at       DateTime?
  TestQuestion     TestQuestion @relation(fields: [test_question_id], references: [id], onDelete: Cascade)

  @@index([id, test_question_id])
}

model StudentAnswer {
  id               String       @id @default(uuid())
  test_question_id String
  student_id       String
  value            String?
  marks_given      Int?
  remarks          String?
  is_attempted     Boolean      @default(true)
  correct_answer   Boolean      @default(false)
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  deleted_at       DateTime?
  Student          Student      @relation(fields: [student_id], references: [id], onDelete: Cascade)
  TestQuestion     TestQuestion @relation(fields: [test_question_id], references: [id], onDelete: Cascade)

  @@index([id, test_question_id, student_id])
}

model TestGroup {
  id              String    @id @default(uuid())
  test_id         String
  class_id        String?
  student_id      String?
  remarks         String?
  score           String?
  percentage      String?
  submission_date DateTime?
  is_late         Boolean?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())
  deleted_at      DateTime?
  is_deleted      Boolean   @default(false)
  Class           Class?    @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Student         Student?  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  Test            Test      @relation(fields: [test_id], references: [id], onDelete: Cascade)

  @@index([id, test_id, class_id, submission_date])
}

model EmployeeAttendance {
  id                String             @id @default(uuid())
  date              DateTime
  campus_id         String
  employee_id       String
  attendance_status AttendanceStatuses
  reason            String?
  time_stamp        DateTime?
  created_by_id     String
  source            String             @default("Manual")
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now())
  deleted_at        DateTime?
  is_deleted        Boolean            @default(false)
  Campus            Campus             @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Employee          Employee           @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@index([id, campus_id, employee_id, attendance_status, time_stamp, created_at])
}

model StudentAttendance {
  id                String             @id @default(uuid())
  date              DateTime
  campus_id         String
  student_id        String
  teacher_id        String
  attendance_status AttendanceStatuses
  reason            String?
  time_stamp        DateTime?
  source            String             @default("Manual")
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now())
  deleted_at        DateTime?
  is_deleted        Boolean            @default(false)
  Campus            Campus             @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Student           Student            @relation(fields: [student_id], references: [id], onDelete: Cascade)
  Teacher           Teacher            @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([id, campus_id, student_id, teacher_id, time_stamp, created_at])
}

model Event {
  id                String   @id @default(uuid())
  event_name        String
  event_description String?
  event_type        String
  event_date        DateTime
  created_by        String
  campus_id         String
  updated_at        DateTime @default(now())
  is_active         Boolean
  is_deleted        Boolean  @default(false)
  company_id        String
  created_at        DateTime @default(now())
  deleted_at        DateTime
  Campus            Campus   @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Company           Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([id, campus_id, company_id, event_name, event_date])
}

model TeacherPromotion {
  id             String    @id @default(uuid())
  teacher_id     String
  position_to    String
  reason         String
  promotion_date DateTime
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  is_deleted     Boolean   @default(false)
  company_id     String
  position_from  String
  Company        Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Teacher        Teacher   @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, teacher_id, promotion_date])
}

model StudentPromotion {
  id         String    @id @default(uuid())
  student_id String
  class_from String
  class_to   String
  remarks    String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  company_id String
  Company    Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Student    Student   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, student_id])
}

model Billing {
  id                  String    @id @default(uuid())
  user_id             String
  company_id          String
  billing_expire      DateTime
  auto_renewal_token  String
  last_payment_status Statuses
  students_limit      Int       @default(0)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  is_deleted          Boolean   @default(false)
  Company             Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  User                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Invoice             Invoice[]

  @@index([id, user_id, company_id, billing_expire, last_payment_status])
}

model Invoice {
  id             String          @id @default(uuid())
  title          String
  due_date       DateTime
  payment_date   DateTime?
  status         InvoiceStatuses
  billing_id     String
  invoice_number String
  payment_mode   String
  payment_vendor String
  unique_token   String?
  reason         String
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now())
  deleted_at     DateTime?
  is_deleted     Boolean         @default(false)
  Billing        Billing         @relation(fields: [billing_id], references: [id], onDelete: Cascade)

  @@index([id, billing_id, invoice_number, due_date, status])
}

model Role {
  id         String    @id @default(uuid())
  user_id    String
  company_id String
  role       Roles
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  is_deleted Boolean   @default(false)
  Company    Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([id, user_id, company_id, role])
}

model Log {
  id          String    @id @default(uuid())
  user_id     String
  company_id  String
  entity_type String
  activity    String
  effect      String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  is_deleted  Boolean   @default(false)
  Company     Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([id, user_id, company_id, entity_type])
}

model Fees {
  id         String   @id @default(uuid())
  amount     String
  student_id String
  due_date   DateTime @default(now())
  is_paid    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  company_id String
  Company    Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Student    Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, student_id, due_date, is_paid])
}

model Enrollment {
  id                String    @id @default(uuid())
  enrollment_number Int
  student_id        String
  course_id         String
  subject_id        String
  created_by_id     String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  is_active         Boolean   @default(false)
  is_deleted        Boolean   @default(false)
  company_id        String
  delted_at         DateTime?
  Company           Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Course            Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  Student           Student   @relation(fields: [student_id], references: [id], onDelete: Cascade)
  Subject           Subject   @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, enrollment_number, student_id])
}

model Examination {
  id          String     @id @default(uuid())
  description String
  total_marks String
  campus_id   String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  is_active   Boolean    @default(false)
  is_deleted  Boolean    @default(false)
  Campus      Campus     @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Question    Question[]

  @@index([id, campus_id])
}

model Question {
  id          String      @id @default(uuid())
  title       String
  marks       String
  subject_id  String
  exam_id     String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  is_active   Boolean     @default(false)
  is_deleted  Boolean     @default(false)
  Examination Examination @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  Subject     Subject     @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@index([id, exam_id])
}

model ClassSchedule {
  id         String    @id @default(uuid())
  date       DateTime  @default(now())
  time       DateTime  @default(now())
  class_id   String
  subject_id String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  is_active  Boolean   @default(false)
  is_deleted Boolean   @default(false)
  deleted_at DateTime?
  Class      Class     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  Subject    Subject   @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@index([id, class_id, subject_id])
}

model Literature {
  id                     String    @id @default(uuid())
  literature_name        String
  course_id              String
  literature_type        String
  literature_description String?
  created_by             String
  literature_language    String
  deleted_at             DateTime?
  is_deleted             Boolean   @default(false)
  literature_url         String
  company_id             String
  created_at             DateTime  @default(now())
  updated_at             DateTime  @default(now())
  Company                Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Course                 Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, course_id])
}

model Income {
  id            String   @id @default(uuid())
  company_id    String
  campus_id     String
  reason        String
  amount        String
  created_by_id String
  updated_by_id String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  is_deleted    Boolean  @default(false)
  Campus        Campus   @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  Company       Company  @relation(fields: [company_id], references: [id], onDelete: Cascade)

  @@index([id, company_id, campus_id, created_by_id, created_at])
}

enum PricingPlan {
  TRIAL
  NONPROFIT
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum Statuses {
  DRAFT
  INPROGRESS
  APPROVED
  REJECTED
  CANCELLED
  POSTPONED
  PREPONED
  COMPLETED
  SUCCESS
  ERROR
}

enum NoticeTypes {
  CIRCULAR
  NOTICES
  WARNING
  NOTIFICATION
  PROMOTION
}

enum AttendanceStatuses {
  PRESENT
  ABSENT
  LEAVE
  PARTIALLEAVE
  LATE
}

enum InvoiceStatuses {
  PAID
  UNPAID
  CANCELLED
  ADJUSTED
}

enum Roles {
  SUPERADMIN
  ADMIN
  FINANCE
  TEACHER
  STUDENT
  EMPLOYEE
  PARENT
  HOD
  ACADEMICS
  TRANSPORTS
  EXAMINATIONS
  ENROLLMENTS
}
